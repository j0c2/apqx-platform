# CI workflow for apqx-platform
# Handles testing, building, security scanning, and publishing

name: CI

concurrency:
  group: gitops-update-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sample-app

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false

      - name: Verify dependencies
        working-directory: ./app
        run: go mod verify

      - name: Run go vet
        working-directory: ./app
        run: go vet ./...

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run staticcheck
        working-directory: ./app
        run: staticcheck ./...

      - name: Run tests
        working-directory: ./app
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./app/coverage.out
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./app
          args: --timeout=5m
          skip-cache: true

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        continue-on-error: true
        with:
          dockerfile: ./app/Dockerfile
          config: ./.hadolint.yaml

      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        continue-on-error: true
        with:
          file_or_dir: |
            .github/workflows/
            gitops/
            infra/terraform/
          config_file: .yamllint.yml
          strict: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false

      - name: Run Trivy vulnerability scanner (filesystem)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Gosec Security Scanner
        continue-on-error: true
        run: |
          GO111MODULE=on go install github.com/securego/gosec/v2/cmd/gosec@latest
          cd app && "$HOME"/go/bin/gosec -fmt sarif -out ../gosec-results.sarif -severity medium ./... || true

      - name: Upload Gosec scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-results.sarif') != ''
        with:
          sarif_file: 'gosec-results.sarif'

  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: >
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      needs.test.result == 'success' && needs.lint.result == 'success'
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-image-results.sarif') != ''
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  deploy:
    name: Update GitOps
    runs-on: ubuntu-latest
    needs: [build]
    if: >
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      needs.test.result == 'success' && needs.lint.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install kustomize
        run: |
          GO111MODULE=on go install sigs.k8s.io/kustomize/kustomize/v5@v5.4.2
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Update image digest in overlay
        working-directory: gitops/apps/app/overlays/dev
        env:
          IMAGE_NAME: ghcr.io/${{ github.repository }}/sample-app
          IMAGE_DIGEST: ${{ needs.build.outputs.digest }}
        run: |
          # Ensure digest starts with sha256:
          if ! echo "$IMAGE_DIGEST" | grep -q '^sha256:'; then
            echo "Unexpected digest format: $IMAGE_DIGEST" && exit 1
          fi
          # Set the image to the exact digest using kustomize
          "$HOME"/go/bin/kustomize edit set image "${IMAGE_NAME}@${IMAGE_DIGEST}"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Pull latest changes to avoid conflicts
          git pull origin main || echo "Pull failed, continuing..."

          git add gitops/apps/app/overlays/dev/kustomization.yaml
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            SHORT="${{ needs.build.outputs.digest }}"
            SHORT="${SHORT#sha256:}"; SHORT=${SHORT:0:12}
            git commit -m "chore: update sample-app image digest to ${SHORT}"
            git push origin "${GITHUB_REF_NAME:-main}"
          fi
