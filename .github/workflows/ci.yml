# CI workflow for apqx-platform
# Handles testing, building, security scanning, and publishing

name: CI

concurrency:
  group: gitops-update-${{ github.ref }}
  cancel-in-progress: false

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/sample-app

permissions:
  contents: write
  packages: write
  security-events: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: app/go.sum

      - name: Verify dependencies
        working-directory: ./app
        run: go mod verify

      - name: Run go vet
        working-directory: ./app
        run: go vet ./...

      - name: Install and run staticcheck
        working-directory: ./app
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@latest
          staticcheck ./...

      - name: Run tests
        working-directory: ./app
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./app/coverage.out
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: app/go.sum

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./app
          args: --timeout=5m

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        continue-on-error: true
        with:
          dockerfile: ./app/Dockerfile
          config: ./.hadolint.yaml

      - name: Lint YAML files
        uses: ibiqlik/action-yamllint@v3
        continue-on-error: true
        with:
          file_or_dir: |
            .github/workflows/
            gitops/
            infra/terraform/
          config_file: .yamllint.yml
          strict: false

  security:
    name: Security Scan (Source)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: app/go.sum

      - name: Run Gosec Security Scanner
        continue-on-error: true
        run: |
          GO111MODULE=on go install github.com/securego/gosec/v2/cmd/gosec@latest
          cd app && "$HOME"/go/bin/gosec -fmt sarif -out ../gosec-results.sarif -severity medium ./... || true

      - name: Upload Gosec scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('gosec-results.sarif') != ''
        with:
          sarif_file: 'gosec-results.sarif'

  build:
    name: Build and Push
    runs-on: [self-hosted, macOS, X64]
    needs: [test, lint]  # security not required for build
    if: >
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      needs.test.result == 'success' && needs.lint.result == 'success' &&
      env.ACT != 'true'
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_SHA=${{ github.sha }}

      - name: Verify build outputs
        run: |
          echo "Image digest: ${{ steps.build.outputs.digest }}"
          echo "Image metadata: ${{ steps.build.outputs.metadata }}"
          echo "Image name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          if [[ -z "${{ steps.build.outputs.digest }}" ]]; then
            echo "❌ Build digest is empty!"
            exit 1
          fi

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  scan:
    name: Security Scan (Image)
  scan:
    name: Security Scan (Image)
    runs-on: ubuntu-latest
    needs: [build]
    if: >
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      needs.build.result == 'success' &&
      env.ACT != 'true'
    continue-on-error: true
    steps:
      - name: Run Trivy vulnerability scanner (image)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-image-results.sarif') != ''
        with:
          sarif_file: 'trivy-image-results.sarif'

  deploy:
    name: Update GitOps
    runs-on: ubuntu-latest
    needs: [build]
    if: >
      github.event_name == 'push' && github.ref == 'refs/heads/main' &&
      needs.build.result == 'success' &&
      env.ACT != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Update image digest in overlay
        working-directory: gitops/apps/app/overlays/dev
        run: |
          kustomize edit set image "ghcr.io/${{ github.repository }}/sample-app@${{ needs.build.outputs.digest }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add kustomization.yaml
          git commit -m "chore: update digest"
          git push
