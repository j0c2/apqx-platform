# Argo Rollout replacing Deployment for progressive delivery
# Enables canary deployments with safe traffic shifting
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: sample-app
  namespace: sample-app
  labels:
    app.kubernetes.io/name: sample-app
    app.kubernetes.io/component: rollout
    app.kubernetes.io/part-of: apqx-platform
spec:
  replicas: 2
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: sample-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sample-app
        app.kubernetes.io/component: app
        app.kubernetes.io/part-of: apqx-platform
        environment: dev
        # role gets patched dynamically by Rollouts controller
    spec:
      serviceAccountName: sample-app
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: sample-app
        image: ghcr.io/j0c2/apqx-platform/sample-app@sha256:placeholder
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        env:
        - name: PORT
          value: "8080"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
  strategy:
    canary:
      stableService: sample-app-stable
      canaryService: sample-app-canary
      # No advanced traffic routing - using replica-based canary
      steps:
      - setWeight: 20
      - pause:
          duration: 60
      - setWeight: 50  
      - pause:
          duration: 60
      - setWeight: 100